apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.seank.azuredevopstest"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode buildVersionCode()
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "APP_SECRET", "\"" + project.properties.app_secret + "\""
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "color", "environment", "product"
    productFlavors {
        productA {
            dimension "product"
            applicationIdSuffix ".A"
            buildConfigField "String", "DOMAIN_NAME", "\"https://www.domainA.com\""
        }
        productB {
            dimension "product"
            applicationIdSuffix ".B"
            buildConfigField "String", "DOMAIN_NAME", "\"https://www.domainB.com\""
        }
        productC {
            dimension "product"
            applicationIdSuffix ".C"
            buildConfigField "String", "DOMAIN_NAME", "\"https://www.domainC.com\""
        }
        red {
            dimension "color"
        }
        green {
            dimension "color"
        }
        blue {
            dimension "color"
        }
        production {
            dimension "environment"
            buildConfigField "String", "API_PATH_SUFFIX", "\"prod\""
        }
        staging {
            dimension "environment"
            buildConfigField "String", "API_PATH_SUFFIX", "\"staging\""
        }
    }

    variantFilter { variant ->
        def color = variant.flavors[0]
        def env = variant.flavors[1]
        def product = variant.flavors[2]

        def activeColors = getActiveColors()
        if (activeColors != null && !activeColors.contains(color.name)) {
            setIgnore(true)
            return
        }

        def activeEnvironments = getActiveEnvironments()
        if (activeEnvironments != null && !activeEnvironments.contains(env.name)) {
            setIgnore(true)
            return
        }

        def activeProducts = getActiveProducts()
        if (activeProducts != null && !activeProducts.contains(product.name)) {
            setIgnore(true)
            return
        }

        // only allow release builds when targeting production environment
        if (variant.buildType.name == "release" && env.name != "production") {
            setIgnore(true)
            return
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = variant.productFlavors[2].name
            outputFileName += "-" + variant.productFlavors[0].name
            outputFileName += "-" + variant.productFlavors[1].name
            outputFileName += "-v" + android.defaultConfig.versionName
            outputFileName += "-" + android.defaultConfig.versionCode
            if (variant.buildType.name == "release") {
                outputFileName += "-release.apk";
            } else {
                outputFileName += "-debug.apk";
            }
        }
    }
}


String[] getActiveColors() {
    if (project.hasProperty('activeColors')) {
        return project.properties.activeColors.split(",")
    }
    return null
}

String[] getActiveEnvironments() {
    if (project.hasProperty('activeEnvironments')) {
        return project.properties.activeEnvironments.split(",")
    }
    return null
}

String[] getActiveProducts() {
    if (project.hasProperty('activeProducts')) {
        return project.properties.activeProducts.split(",")
    }
    return null
}

Integer buildVersionCode() {
    if (project.hasProperty('versionCode')) {
        return project.properties.versionCode.toInteger()
    } else {
        return 1
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'com.google.android.material:material:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
